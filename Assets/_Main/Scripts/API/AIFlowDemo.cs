using System.Collections;
using UnityEngine;
using API;
using System;
using Sirenix.OdinInspector;
using System.Collections.Generic;

/// <summary>
/// Demo script ƒë·ªÉ minh h·ªça flow AI ho√†n ch·ªânh: Unity -> AWS -> Firebase
/// S·ª≠ d·ª•ng Odin Inspector cho demo nhanh ch√≥ng
/// </summary>
public class AIFlowDemo : MonoBehaviour
{
    [TabGroup("Input")]
    [TextArea(2, 4)]
    [LabelText("Prompt ƒë·ªÉ t·∫°o ·∫£nh")]
    public string imagePrompt = "a red sports car on a mountain road";

    [TabGroup("Input")]
    [LabelText("Texture2D ƒë·ªÉ t·∫°o Lego")]
    public Texture2D image;

    [TabGroup("Input")]
    [TextArea(2, 4)]
    [LabelText("Base64 ƒë·ªÉ t·∫°o Lego")]
    public string imageBase = "a red sports car on a mountain road";

    [TabGroup("Input")]
    [TextArea(1, 3)]
    [LabelText("S3 URL ƒë·ªÉ t·∫£i LDR")]
    [InfoBox("Nh·∫≠p ƒë∆∞·ªùng link S3 c·ªßa file LDR ƒë·ªÉ t·∫£i xu·ªëng tr·ª±c ti·∫øp")]
    public string s3LdrUrl = "";

    [TabGroup("Settings")]
    [Range(0.01f, 0.1f)]
    [LabelText("Chi ti·∫øt LEGO")]
    [InfoBox("Gi√° tr·ªã th·∫•p h∆°n = chi ti·∫øt cao h∆°n")]
    public float legoDetails = 0.02f;
    
    [TabGroup("Settings")]
    [Range(0.1f, 1.0f)]
    [LabelText("T·ª∑ l·ªá foreground")]
    [InfoBox("T·ª∑ l·ªá lo·∫°i b·ªè background")]
    public float foregroundRatio = 0.85f;

    [TabGroup("Status")]
    [ShowInInspector, ReadOnly]
    [LabelText("Tr·∫°ng th√°i hi·ªán t·∫°i")]
    private string currentStatus = "S·∫µn s√†ng";

    [TabGroup("Status")]
    [ShowInInspector, ReadOnly]
    [LabelText("C√≥ ·∫£nh ƒë·ªÉ t·∫°o LEGO")]
    private bool hasImageForLego => !string.IsNullOrEmpty(currentImageBase64);

    [TabGroup("Results")]
    [ShowInInspector, ReadOnly]
    [PreviewField(120, ObjectFieldAlignment.Left)]
    [LabelText("·∫¢nh ƒë√£ t·∫°o")]
    private Texture2D generatedImage;

    [TabGroup("Results")]
    [ShowInInspector, ReadOnly]
    [LabelText("Request ID hi·ªán t·∫°i")]
    private string currentRequestId;

    [TabGroup("Results")]
    [ShowInInspector, ReadOnly]
    [LabelText("LEGO Model Data")]
    private API.LegoModelData currentLegoData;

    [TabGroup("Logs")]
    [ShowInInspector, ReadOnly]
    [TextArea(10, 15)]
    [LabelText("Log Messages")]
    private string logMessages = "";

    private string currentImageBase64;
    private List<string> logs = new List<string>();

    void Start()
    {
        UpdateStatus("S·∫µn s√†ng. Nh·∫•n 'T·∫°o ·∫¢nh' ƒë·ªÉ b·∫Øt ƒë·∫ßu demo.");
    }

    [TabGroup("Actions")]
    [Button("üé® T·∫°o ·∫¢nh t·ª´ Prompt", ButtonSizes.Large)]
    [EnableIf("@!string.IsNullOrEmpty(imagePrompt)")]
    public void GenerateImage()
    {
        if (string.IsNullOrEmpty(imagePrompt))
        {
            UpdateStatus("Vui l√≤ng nh·∫≠p prompt!");
            return;
        }

        StartCoroutine(GenerateImageFlow());
    }

    [TabGroup("Actions")]
    [Button("üß± T·∫°o LEGO t·ª´ ·∫¢nh", ButtonSizes.Large)]
    [EnableIf("hasImageForLego")]
    public void GenerateLego()
    {
        if (string.IsNullOrEmpty(currentImageBase64))
        {
            UpdateStatus("C·∫ßn c√≥ ·∫£nh tr∆∞·ªõc khi t·∫°o LEGO!");
            return;
        }

        StartCoroutine(GenerateLegoFlow());
    }

    [TabGroup("Actions")]
    [Button("üß± T·∫°o LEGO t·ª´ Base64", ButtonSizes.Large)]
    public void GenerateLegoFromBase64()
    {
        currentImageBase64 = imageBase;
        if (string.IsNullOrEmpty(imageBase))
        {
            UpdateStatus("C·∫ßn c√≥ ·∫£nh tr∆∞·ªõc khi t·∫°o LEGO!");
            return;
        }

        StartCoroutine(GenerateLegoFlow());
    }

    [TabGroup("Actions")]
    [Button("üß± T·∫°o LEGO t·ª´ Texture2D", ButtonSizes.Large)]
    public void GenerateLegoFromTexture2D()
    {
        byte[] imageData = image.EncodeToPNG();
        currentImageBase64 = Convert.ToBase64String(imageData);
        if (string.IsNullOrEmpty(imageBase))
        {
            UpdateStatus("C·∫ßn c√≥ ·∫£nh tr∆∞·ªõc khi t·∫°o LEGO!");
            return;
        }

        StartCoroutine(GenerateLegoFlow());
    }

    [TabGroup("Actions")]
    [Button("üì• T·∫£i File LDR", ButtonSizes.Medium)]
    [EnableIf("@currentLegoData != null && !string.IsNullOrEmpty(currentLegoData.model_url)")]
    public void DownloadLDRFile()
    {
        if (currentLegoData != null && !string.IsNullOrEmpty(currentLegoData.model_url))
        {
            StartCoroutine(DownloadLDRFlow());
        }
    }

    [TabGroup("Actions")]
    [Button("üîó T·∫£i LDR t·ª´ S3 URL", ButtonSizes.Medium)]
    [EnableIf("@!string.IsNullOrEmpty(s3LdrUrl)")]
    public void DownloadLDRFromS3Url()
    {
        if (string.IsNullOrEmpty(s3LdrUrl))
        {
            UpdateStatus("Vui l√≤ng nh·∫≠p S3 URL!");
            return;
        }

        DownloadS3LDRFlow();
    }

    [TabGroup("Actions")]
    [Button("üìã Clear Logs", ButtonSizes.Small)]
    public void ClearLogs()
    {
        logs.Clear();
        logMessages = "";
    }

    /// <summary>
    /// Flow t·∫°o ·∫£nh - nh·∫≠n k·∫øt qu·∫£ ngay l·∫≠p t·ª©c
    /// </summary>
    private IEnumerator GenerateImageFlow()
    {
        UpdateStatus("üîÑ ƒêang t·∫°o ·∫£nh t·ª´ prompt...");
        LogMessage($"B·∫Øt ƒë·∫ßu t·∫°o ·∫£nh v·ªõi prompt: {imagePrompt}");

        yield return APIManager.Instance.CallGenImage(imagePrompt, (response, error) =>
        {
            if (error != null)
            {
                UpdateStatus($"‚ùå L·ªói t·∫°o ·∫£nh: {error}");
                LogMessage($"‚ùå L·ªói: {error}");
                return;
            }

            if (response != null && !string.IsNullOrEmpty(response.image))
            {
                // Chuy·ªÉn ƒë·ªïi base64 th√†nh texture v√† hi·ªÉn th·ªã
                try
                {
                    byte[] imageBytes = Convert.FromBase64String(response.image);
                    Texture2D texture = new Texture2D(2, 2);
                    texture.LoadImage(imageBytes);
                    
                    generatedImage = texture;
                    
                    // L∆∞u base64 ƒë·ªÉ s·ª≠ d·ª•ng cho LEGO
                    currentImageBase64 = response.image;
                    
                    UpdateStatus("‚úÖ T·∫°o ·∫£nh th√†nh c√¥ng! C√≥ th·ªÉ t·∫°o LEGO t·ª´ ·∫£nh n√†y.");
                    LogMessage($"‚úÖ T·∫°o ·∫£nh th√†nh c√¥ng! Request ID: {response.requestId}");
                    LogMessage($"üìè K√≠ch th∆∞·ªõc ·∫£nh: {texture.width}x{texture.height}");
                }
                catch (Exception e)
                {
                    UpdateStatus($"‚ùå L·ªói hi·ªÉn th·ªã ·∫£nh: {e.Message}");
                    LogMessage($"‚ùå L·ªói hi·ªÉn th·ªã: {e.Message}");
                }
            }
            else
            {
                UpdateStatus("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu ·∫£nh t·ª´ server");
                LogMessage("‚ùå Response kh√¥ng ch·ª©a d·ªØ li·ªáu ·∫£nh");
            }
        });
    }

    /// <summary>
    /// Flow t·∫°o LEGO - async v·ªõi Firebase listener
    /// </summary>
    private IEnumerator GenerateLegoFlow()
    {
        UpdateStatus("üîÑ ƒêang g·ª≠i request t·∫°o LEGO...");
        LogMessage($"üß± B·∫Øt ƒë·∫ßu t·∫°o LEGO v·ªõi Details: {legoDetails}, ForegroundRatio: {foregroundRatio}");

        yield return APIManager.Instance.CallGenLego(currentImageBase64, (API.LegoModelData modelData, string error) =>
        {
            OnLegoCompleted(modelData, error);
        }, legoDetails, foregroundRatio);
    }

    /// <summary>
    /// Flow t·∫£i xu·ªëng file LDR
    /// </summary>
    private IEnumerator DownloadLDRFlow()
    {
        UpdateStatus("üì• ƒêang t·∫£i file LDR...");
        LogMessage($"üì• B·∫Øt ƒë·∫ßu t·∫£i file LDR: {currentLegoData.model_url}");

        yield return LDRDownloader.DownloadLDRFile(currentLegoData.model_url, (ldrContent, error) =>
        {
            if (error != null)
            {
                UpdateStatus($"‚ùå L·ªói t·∫£i file LDR: {error}");
                LogMessage($"‚ùå L·ªói t·∫£i LDR: {error}");
                return;
            }

            if (!string.IsNullOrEmpty(ldrContent))
            {
                // L∆∞u file LDR
                string fileName = LDRDownloader.GetFileNameFromS3Path(currentLegoData.model_url);
                string savedPath = LDRDownloader.SaveLDRToLocal(ldrContent, fileName);
                
                if (!string.IsNullOrEmpty(savedPath))
                {
                    UpdateStatus("‚úÖ T·∫£i v√† l∆∞u file LDR th√†nh c√¥ng!");
                    LogMessage($"‚úÖ File LDR ƒë√£ l∆∞u t·∫°i: {savedPath}");
                    LogMessage($"üìÑ K√≠ch th∆∞·ªõc file: {ldrContent.Length} characters");
                }
                else
                {
                    UpdateStatus("‚ùå L·ªói l∆∞u file LDR");
                    LogMessage("‚ùå Kh√¥ng th·ªÉ l∆∞u file LDR");
                }
            }
            else
            {
                UpdateStatus("‚ùå File LDR r·ªóng");
                LogMessage("‚ùå N·ªôi dung file LDR r·ªóng");
            }
        });
    }

    /// <summary>
    /// Flow t·∫£i xu·ªëng file LDR t·ª´ S3 URL ƒë∆∞·ª£c nh·∫≠p th·ªß c√¥ng
    /// </summary>
    private void DownloadS3LDRFlow()
    {
        UpdateStatus("üì• ƒêang t·∫£i file LDR t·ª´ S3 URL...");
        LogMessage($"üì• B·∫Øt ƒë·∫ßu t·∫£i file LDR t·ª´ URL: {s3LdrUrl}");
        string userId = FirebaseAuthManager.Instance.GetCurrentUserId();
        LDRDownloader.DownloadLDRFileFromS3Path(userId, s3LdrUrl, (ldrContent, error) =>
        {
            if (error != null)
            {
                UpdateStatus($"‚ùå L·ªói t·∫£i file LDR t·ª´ S3: {error}");
                LogMessage($"‚ùå L·ªói t·∫£i LDR t·ª´ S3: {error}");
                return;
            }

            if (!string.IsNullOrEmpty(ldrContent))
            {
                // L∆∞u file LDR
                string fileName = LDRDownloader.GetFileNameFromS3Path(s3LdrUrl);
                string savedPath = LDRDownloader.SaveLDRToLocal(ldrContent, fileName);
                
                if (!string.IsNullOrEmpty(savedPath))
                {
                    UpdateStatus("‚úÖ T·∫£i v√† l∆∞u file LDR t·ª´ S3 th√†nh c√¥ng!");
                    LogMessage($"‚úÖ File LDR t·ª´ S3 ƒë√£ l∆∞u t·∫°i: {savedPath}");
                    LogMessage($"üìÑ K√≠ch th∆∞·ªõc file: {ldrContent.Length} characters");
                    LogMessage($"üìÇ T√™n file: {fileName}.ldr");
                }
                else
                {
                    UpdateStatus("‚ùå L·ªói l∆∞u file LDR t·ª´ S3");
                    LogMessage("‚ùå Kh√¥ng th·ªÉ l∆∞u file LDR t·ª´ S3");
                }
            }
            else
            {
                UpdateStatus("‚ùå File LDR t·ª´ S3 r·ªóng");
                LogMessage("‚ùå N·ªôi dung file LDR t·ª´ S3 r·ªóng");
            }
        });
    }




    /// <summary>
    /// Callback khi qu√° tr√¨nh t·∫°o LEGO ho√†n th√†nh (t·ª´ Firebase)
    /// </summary>
    private void OnLegoCompleted(API.LegoModelData modelData, string error)
    {
        if (error != null)
        {
            UpdateStatus($"‚ùå L·ªói t·∫°o LEGO: {error}");
            LogMessage($"‚ùå L·ªói t·∫°o LEGO: {error}");
            return;
        }

        if (modelData != null)
        {
            currentLegoData = modelData;
            currentRequestId = modelData.requestId;
            
            UpdateStatus("‚úÖ T·∫°o LEGO th√†nh c√¥ng!");
            LogMessage($"‚úÖ LEGO ho√†n th√†nh! Request ID: {modelData.requestId}");
            LogMessage($"üîó Model URL: {modelData.model_url}");
            LogMessage($"üìä Status: {modelData.status}");
            
            if (!string.IsNullOrEmpty(modelData.thumbnail_url))
            {
                LogMessage($"üñºÔ∏è Thumbnail: {modelData.thumbnail_url}");
            }
            
            if (!string.IsNullOrEmpty(modelData.category))
            {
                LogMessage($"üìÇ Category: {modelData.category}");
            }
            
            if (!string.IsNullOrEmpty(modelData.polycount))
            {
                LogMessage($"üî¢ Polycount: {modelData.polycount}");
            }
        }
        else
        {
            UpdateStatus("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu LEGO");
            LogMessage("‚ùå Response kh√¥ng ch·ª©a d·ªØ li·ªáu LEGO");
        }
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t status
    /// </summary>
    private void UpdateStatus(string message)
    {
        currentStatus = message;
        Debug.Log($"[AIFlowDemo Status] {message}");
    }

    /// <summary>
    /// Th√™m message v√†o log
    /// </summary>
    private void LogMessage(string message)
    {
        string timestamp = DateTime.Now.ToString("HH:mm:ss");
        string logEntry = $"[{timestamp}] {message}";
        
        logs.Add(logEntry);
        
        // Gi·ªõi h·∫°n s·ªë d√≤ng log
        if (logs.Count > 50)
        {
            logs.RemoveAt(0);
        }
        
        // C·∫≠p nh·∫≠t log text ƒë·ªÉ hi·ªÉn th·ªã trong Inspector
        logMessages = string.Join("\n", logs);
        
        Debug.Log($"[AIFlowDemo Log] {message}");
    }

    void OnDestroy()
    {
        // Cleanup
        if (!string.IsNullOrEmpty(currentRequestId))
        {
            APIManager.Instance?.CancelLegoRequest(currentRequestId);
        }
    }
} 